{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","isEmail","custom","value","req","findOne","email","user","phone","userQuery","_id","$ne","userPhoneQuery","signUp","res","next","validationErrors","array","length","file","body","img","type","active","create","createdUser","status","send","token","signin","console","log","completedOrderOfOneUser","limit","parseInt","query","page","find","$and","customer","params","userId","$or","populate","skip","sort","creationDate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","provider","price","deliveryPrice","Math","ceil","unCompletedOrderOfOneUser","countOrdersOfCustomer","customerId","findById","customerDetails","count","countOfAllOrder","queryComplete","countOfCompleted","queryOfPending","countOfPendding","queryOfRefuse","countOfRefuse","json","updateProfile","userDetails","end","findByIdAndUpdate","new","newUser","reriveUserDetails"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { body, validationResult } from 'express-validator/check';\nimport mongoose, { Schema } from \"mongoose\";\nimport ApiError from '../helpers/ApiError'\nimport { multerSaveTo } from '../services/multer'\nimport { toImgUrl } from '../utils/index'\nimport Order from '../models/order.model'\nimport ApiResponse from '../helpers/ApiResponse'\n\n\nconst { jwtSecret } = config;\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n    }, jwtSecret, { expiresIn: '10000s' })\n}\n\n\n//function check phone regular exression \n//this function support \n// +XX-XXXX-XXXX  \n// +XX.XXXX.XXXX  \n// +XX XXXX XXXX \nconst checkPhone = inputtxt => {\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    if (inputtxt.match(phoneno)) {\n        return true;\n    }\n    else {\n        throw new Error(\"invalid phone\")\n    }\n}\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"name\").exists().withMessage(\"name is required\"),\n            body(\"email\").exists().withMessage(\"Email is required\")\n                .isEmail().withMessage(\"Email is invalid syntax\")\n                .custom(async (value, { req }) => {\n                    let user = await User.findOne({ email: value });\n                    if (!user)\n                        return true\n                }).withMessage('email exist before'),\n            body(\"password\").exists().withMessage(\"password is required\"),\n            body(\"phone\").exists().withMessage(\"phone is requires\")\n                //make custome validation to phone to check on phone[unique, isPhone]\n                .custom(async (value, { req }) => {\n                    //call phone checking pattren function \n                    checkPhone(value);\n                    if (isUpdate && req.user.phone == value)\n                        userQuery._id = { $ne: req.user._id };\n                    let userPhoneQuery = { phone: value };\n                    let user = await User.findOne(userPhoneQuery);\n                    if (user)\n                        throw new Error('phone already exists');\n                    else\n                        return true\n                })\n        ];\n    },\n    //signup logic \n    async signUp(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            \n            if (req.body.type == \"PROVIDER\")\n                req.body.active = false\n\n            let createdUser = await User.create(req.body);\n            res.status(201).send({ user: createdUser, token: generateToken(createdUser.id) });\n        } catch (err) {\n            next(err);\n        }\n    },\n    //sign in logic \n    async signin(req, res, next) {\n        let user = req.user; // Passport\n        console.log(user.type)\n        res.send({ user, token: generateToken(user.id) });\n    },\n    async completedOrderOfOneUser(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { customer: req.params.userId },\n                    { $or: [{ status: \"delivered\" }, { status: \"rejected\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    async unCompletedOrderOfOneUser(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { customer: req.params.userId },\n                    { $or: [{ status: \"onTheWay\" }, { status: \"accepted\" }, { status: \"pendding\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice;\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch some statistics about order \n    async countOrdersOfCustomer(req, res, next) {\n        try {\n            let customerId = req.params.customerId;\n            let customerDetails = await User.findById(customerId);\n            let countOfAllOrder = await Order.count({ customer: customerId });\n\n            let queryComplete = {};\n            queryComplete.status = \"delivered\";\n            queryComplete.customer = customerId;\n            let countOfCompleted = await Order.count(queryComplete);\n\n            let queryOfPending = {}\n            queryOfPending.status = \"pendding\";\n            queryOfPending.customer = customerId;\n            let countOfPendding = await Order.count(queryOfPending);\n\n            let queryOfRefuse = {}\n            queryOfRefuse.status = \"rejected\";\n            queryOfRefuse.customer = customerId;\n            let countOfRefuse = await Order.count(queryOfRefuse);\n\n            return res.status(200).json({\n                countOfAllOrder,\n                countOfCompleted,\n                countOfPendding,\n                countOfRefuse\n            })\n        } catch (err) {\n            next(err)\n        }\n    },\n    //update profile\n    async updateProfile(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            if (req.file)\n                req.body.img = await toImgUrl(req.file)\n            let newUser = await User.findByIdAndUpdate(userId, req.body, { new: true });\n            return res.status(200).json(newUser);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch user details \n    async reriveUserDetails(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            return res.status(200).json(userDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}