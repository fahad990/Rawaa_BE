{"version":3,"sources":["../../src/services/passport.js"],"names":["JwtStrategy","Strategy","LocalStrategy","ExtractJwt","jwtSecret","use","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","payload","done","findById","sub","then","user","catch","console","log","err","usernameField","phone","password","findOne","isValidPassword","isMatch","error"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,sBAAYC,QAAhC;AACA,IAAMC,gBAAgB,wBAAcD,QAApC;IACQE,U,yBAAAA,U;IACAC,S,oBAAAA,S;;;AAGR,mBAASC,GAAT,CAAa,IAAIL,WAAJ,CAAgB;AACzBM,oBAAgBH,WAAWI,2BAAX,EADS;AAEzBC,iBAAaJ;AAFY,CAAhB,EAGV,UAACK,OAAD,EAAUC,IAAV,EAAmB;AAClB;AACA,mBAAKC,QAAL,CAAcF,QAAQG,GAAtB,EAA2BC,IAA3B,CAAgC,gBAAQ;AACpC,YAAI,CAACC,IAAL,EACI,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;;AAEJ,eAAOA,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,KALD,EAKGC,KALH,CAKS,eAAO;AACZC,gBAAQC,GAAR,CAAY,kBAAZ,EAAgCC,GAAhC;AACAR,aAAK,IAAL,EAAW,KAAX;AACH,KARD;AASH,CAdY,CAAb;;AAiBA,mBAASL,GAAT,CAAa,IAAIH,aAAJ,CAAkB;AAC3BiB,mBAAe;AADY,CAAlB,EAEV,UAACC,KAAD,EAAQC,QAAR,EAAkBX,IAAlB,EAA2B;AAC1B,mBAAKY,OAAL,CAAa,EAAEF,YAAF,EAAb,EAAwBP,IAAxB,CAA6B,gBAAQ;AACjC,YAAI,CAACC,IAAL,EACI,OAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;;AAEJ;AACAI,aAAKS,eAAL,CAAqBF,QAArB,EAA+B,UAAUH,GAAV,EAAeM,OAAf,EAAwB;AACnD,gBAAIN,GAAJ,EAAS,OAAOR,KAAKQ,GAAL,CAAP;AACT,gBAAI,CAACM,OAAL,EAAc,OAAOd,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAEe,OAAO,qBAAT,EAAlB,CAAP;;AAEd,mBAAOf,KAAK,IAAL,EAAWI,IAAX,CAAP;AACH,SALD;AAOH,KAZD;AAaH,CAhBY,CAAb","file":"passport.js","sourcesContent":["\nimport passport from \"passport\";\nimport passportJwt from \"passport-jwt\";\nimport passportLocal from \"passport-local\";\nimport config from \"../config\";\nimport User from \"../models/user.model\";\n\nconst JwtStrategy = passportJwt.Strategy;\nconst LocalStrategy = passportLocal.Strategy;\nconst { ExtractJwt } = passportJwt;\nconst { jwtSecret } = config;\n\n\npassport.use(new JwtStrategy({\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    secretOrKey: jwtSecret\n}, (payload, done) => {\n    // find user in token\n    User.findById(payload.sub).then(user => {\n        if (!user)\n            return done(null, false);\n\n        return done(null, user)\n    }).catch(err => {\n        console.log('Passport Error: ', err);\n        done(null, false);\n    })\n}));\n\n\npassport.use(new LocalStrategy({\n    usernameField: 'phone'\n}, (phone, password, done) => {\n    User.findOne({ phone }).then(user => {\n        if (!user)\n            return done(null, false);\n\n        // Compare Passwords \n        user.isValidPassword(password, function (err, isMatch) {\n            if (err) return done(err);\n            if (!isMatch) return done(null, false, { error: 'Invalid Credentials' });\n\n            return done(null, user);\n        })\n\n    });\n}));"]}