{"version":3,"sources":["../../../src/controllers/galon/galon.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createGalon","req","res","next","validationErrors","array","length","user","type","file","body","img","_id","create","newDoc","status","json","allGalons","limit","parseInt","query","page","available","count","docsCount","find","populate","skip","sort","creationDate","allDocs","send","Math","ceil","galonDetails","galonId","params","findById","doc","updateGalon","galon","id","update","$set","size","priceOfBuying","priceOfSubstitution","minimumNumberOnOrder","newGalon","galonsOfOneProvider","userId","updateAvalaibiltyOfGalons","end","save"],"mappings":"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","file":"galon.controller.js","sourcesContent":["import Galon from '../../models/galon.model';\r\nimport mongoose from 'mongoose';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport { toImgUrl } from '../../utils/index'\r\nimport ApiError from '../../helpers/ApiError'\r\nimport ApiResponse from '../../helpers/ApiResponse'\r\n\r\n\r\nexport default {\r\n\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"size\").exists().withMessage(\"numberOfBottles is required\"),\r\n            body(\"priceOfBuying\").exists().withMessage(\"priceOfBuying is required\")\r\n        ];\r\n    },\r\n    //create new galon\r\n    async createGalon(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (!(req.user.type == \"PROVIDER\")) {\r\n                next(new ApiError(403, 'not provider user'))\r\n            }\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            } else {\r\n                next(new ApiError(422, 'img is required'))\r\n            }\r\n            req.body.user = req.user._id\r\n            let newDoc = await Galon.create(req.body);\r\n            return res.status(201).json(newDoc);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive all galons \r\n    async allGalons(req, res, next) {\r\n        const limit = parseInt(req.query.limit) || 200;\r\n        const page = req.query.page || 1;\r\n        let query = {}\r\n        try {\r\n            query.available = true\r\n            let docsCount = await Galon.count(query)\r\n            let allDocs = await Galon.find(query).populate('user')\r\n                .skip((page * limit) - limit).limit(limit).sort({ creationDate: -1 });\r\n            return res.send(new ApiResponse(\r\n                allDocs,\r\n                page,\r\n                Math.ceil(docsCount / limit),\r\n                limit,\r\n                docsCount,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive one galone details \r\n    async galonDetails(req, res, next) {\r\n        const galonId = req.params.galonId;\r\n        let doc = await Galon.findById(galonId);\r\n        if (!doc)\r\n            return next(new ApiError(404));\r\n        return res.status(200).json(doc);\r\n    },\r\n\r\n    //update one galon details \r\n    async updateGalon(req, res, next) {\r\n        const galonId = req.params.galonId;\r\n        try {\r\n            let galon = await Galon.findById(galonId)\r\n            if (!(req.user.id == galon.user)) {\r\n                return next(new ApiError(403, \"not have access to this resourse\"))\r\n            }\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            }\r\n            await Galon.update({ _id: galonId }, {\r\n                $set: {\r\n                    size: req.body.size || galon.size,\r\n                    img: req.body.img || galon.img,\r\n                    available: req.body.available || galon.available,\r\n                    priceOfBuying: req.body.priceOfBuying || galon.priceOfBuying,\r\n                    priceOfSubstitution: req.body.priceOfSubstitution || galon.priceOfSubstitution,\r\n                    minimumNumberOnOrder: req.body.minimumNumberOnOrder || galon.minimumNumberOnOrder,\r\n                }\r\n            })\r\n            let newGalon = await Galon.findById(galonId)\r\n                .populate('user')\r\n            return res.status(200).json(newGalon)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive all galons under one provider \r\n    async galonsOfOneProvider(req, res, next) {\r\n        const limit = parseInt(req.query.limit) || 200;\r\n        const page = req.query.page || 1;\r\n        const userId = req.params.userId;\r\n        try {\r\n            let query = {}\r\n            query.available = true\r\n            query.user = userId\r\n            let docsCount = await Galon.count(query)\r\n            let allDocs = await Galon.find(query)\r\n                .populate('user')\r\n                .skip((page - 1) * limit).limit(limit).sort({ creationDate: -1 })\r\n            return res.send(new ApiResponse(\r\n                allDocs,\r\n                page,\r\n                Math.ceil(docsCount / limit),\r\n                limit,\r\n                docsCount,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //make carttons available\r\n    async updateAvalaibiltyOfGalons(req, res, next) {\r\n        try {\r\n            let galonId = req.params.galonId;\r\n            let galonDetails = await Galon.findById(galonId);\r\n            if (!galonDetails)\r\n                return res.status(404).end();\r\n\r\n            if (galonDetails.available == true)\r\n                galonDetails.available = false\r\n            else\r\n                galonDetails.available = true\r\n\r\n            await galonDetails.save();\r\n            return res.status(204).end();\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n\r\n}"]}