{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","custom","value","req","user","phone","userQuery","_id","$ne","userPhoneQuery","findOne","signUp","res","next","validationErrors","array","length","file","body","img","create","createdUser","status","send","token","signin","console","log","type","completedOrderOfOneUser","limit","parseInt","query","page","find","$and","customer","params","userId","$or","populate","skip","sort","creationDate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","provider","price","deliveryPrice","Math","ceil","unCompletedOrderOfOneUser","countOrdersOfCustomer","customerId","findById","customerDetails","count","countOfAllOrder","queryComplete","countOfCompleted","queryOfPending","countOfPendding","queryOfRefuse","countOfRefuse","json","updateProfile","userDetails","end","findByIdAndUpdate","new","newUser","reriveUserDetails"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { body, validationResult } from 'express-validator/check';\nimport mongoose, { Schema } from \"mongoose\";\nimport ApiError from '../helpers/ApiError'\nimport { multerSaveTo } from '../services/multer'\nimport { toImgUrl } from '../utils/index'\nimport Order from '../models/order.model'\nimport ApiResponse from '../helpers/ApiResponse'\n\n\nconst { jwtSecret } = config;\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n    }, jwtSecret, { expiresIn: '10000s' })\n}\n\n\n//function check phone regular exression \n//this function support \n// +XX-XXXX-XXXX  \n// +XX.XXXX.XXXX  \n// +XX XXXX XXXX \nconst checkPhone = inputtxt => {\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    if (inputtxt.match(phoneno)) {\n        return true;\n    }\n    else {\n        throw new Error(\"invalid phone\")\n    }\n}\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"name\").exists().withMessage(\"name is required\"),\n            body(\"email\").exists().withMessage(\"email is required\"),\n            body(\"password\").exists().withMessage(\"password is required\"),\n            body(\"phone\").exists().withMessage(\"phone is requires\")\n                //make custome validation to phone to check on phone[unique, isPhone]\n                .custom(async (value, { req }) => {\n                    //call phone checking pattren function \n                    checkPhone(value);\n                    if (isUpdate && req.user.phone == value)\n                        userQuery._id = { $ne: req.user._id };\n                    let userPhoneQuery = { phone: value };\n                    let user = await User.findOne(userPhoneQuery);\n                    if (user)\n                        throw new Error('phone already exists');\n                    else\n                        return true\n                })\n        ];\n    },\n    //signup logic \n    async signUp(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            let createdUser = await User.create(req.body);\n            res.status(201).send({ user: createdUser, token: generateToken(createdUser.id) });\n        } catch (err) {\n            next(err);\n        }\n    },\n    //sign in logic \n    async signin(req, res, next) {\n        let user = req.user; // Passport\n        console.log(user.type)\n        res.send({ user, token: generateToken(user.id) });\n    },\n    async completedOrderOfOneUser(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { customer: req.params.userId },\n                    { $or: [{ status: \"delivered\" }, { status: \"rejected\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    async unCompletedOrderOfOneUser(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { customer: req.params.userId },\n                    { $or: [{ status: \"onTheWay\" }, { status: \"accepted\" }, { status: \"pendding\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice;\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch some statistics about order \n    async countOrdersOfCustomer(req, res, next) {\n        try {\n            let customerId = req.params.customerId;\n            let customerDetails = await User.findById(customerId);\n            let countOfAllOrder = await Order.count({ customer: customerId });\n\n            let queryComplete = {};\n            queryComplete.status = \"delivered\";\n            queryComplete.customer = customerId;\n            let countOfCompleted = await Order.count(queryComplete);\n\n            let queryOfPending = {}\n            queryOfPending.status = \"pendding\";\n            queryOfPending.customer = customerId;\n            let countOfPendding = await Order.count(queryOfPending);\n\n            let queryOfRefuse = {}\n            queryOfRefuse.status = \"rejected\";\n            queryOfRefuse.customer = customerId;\n            let countOfRefuse = await Order.count(queryOfRefuse);\n\n            return res.status(200).json({\n                countOfAllOrder,\n                countOfCompleted,\n                countOfPendding,\n                countOfRefuse\n            })\n        } catch (err) {\n            next(err)\n        }\n    },\n    //update profile\n    async updateProfile(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            if (req.file)\n                req.body.img = await toImgUrl(req.file)\n            let newUser = await User.findByIdAndUpdate(userId, req.body, { new: true });\n            return res.status(200).json(newUser);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch user details \n    async reriveUserDetails(req, res, next) {\n        try {\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return res.status(404).end();\n            return res.status(200).json(userDetails);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}