{"version":3,"sources":["../../src/controllers/order.controller.js"],"names":["deg2rad","deg","Math","PI","validateBody","isUpdate","exists","withMessage","createOrder","req","res","next","validationErrors","array","length","objectToCreated","body","cartons","cartonsArray","cartonsQuantity","x","push","id","quantity","galons","galonsArray","galonsQuantityOfBuying","galonsQuantityOfSubstitution","galonsType","z","quantityOfBuying","quantityOfSubstitution","typeOrder","lang","lat","orderLocation","location","provider","customer","user","price","create","newOrder","targetUser","order","text","newNoti","title","findById","populate","retriveOrder","lenOfCartons","result","resultcartons","resultcartonsQuantity","item","quantityItem","lenOfGalons","resultGalons","resultGalonsQuantityOfBuying","resultGalonsQuantityOfSubstitution","resultGalonsTypeOrder","galonsTypeOrder","typeOrderOfSubstitution","status","creationDate","json","allOrdersOfProvider","limit","parseInt","query","page","params","providerId","find","skip","sort","allOrders","map","OneOrderItem","cartonsResult","elme","oneCartonItem","galonsResult","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","send","ceil","validateBodyOfCalulatePrice","calculatePriceOfDistance","lang1","parseFloat","from","lat1","lang2","to","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","console","log","findOne","cost","orderDetails","orderId","end","acceptOrder","findByIdAndUpdate","new","refuseOrder","makeOrderOnDiliver","makeOrderDone"],"mappings":"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","file":"order.controller.js","sourcesContent":["import Order from '../models/order.model'\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport ApiError from '../helpers/ApiError';\nimport ApiResponse from '../helpers/ApiResponse';\nimport Price from '../models/price-of-km.model';\nimport { send } from '../services/push-notifications';\nimport NotificationOrder from '../models/notification.model';\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\nexport default {\n\n    validateBody(isUpdate = false) {\n        return [\n            body(\"price\").exists().withMessage(\"price is required\"),\n            body(\"provider\").exists().withMessage(\"provider is required\"),\n        ];\n    },\n    //create new order \n    async createOrder(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let objectToCreated = {}\n            //prepare carton data [[{id : 5, quantity : 8}]]\n            if (req.body.cartons) {\n                let cartonsArray = req.body.cartons;\n                let cartons = [];\n                let cartonsQuantity = [];\n                for (let x = 0; x < cartonsArray.length; x++) {\n                    cartons.push(cartonsArray[x].id);\n                    cartonsQuantity.push(cartonsArray[x].quantity);\n                }\n                objectToCreated.cartons = cartons;\n                objectToCreated.cartonsQuantity = cartonsQuantity\n            }\n\n            //prepare galons data \n            if (req.body.galons) {\n                let galonsArray = req.body.galons;\n                let galons = [];\n                let galonsQuantityOfBuying = [];\n                let galonsQuantityOfSubstitution = [];\n                let galonsType = [];\n                for (let z = 0; z < galonsArray.length; z++) {\n                    galons.push(galonsArray[z].id);\n                    galonsQuantityOfBuying.push(galonsArray[z].quantityOfBuying);\n                    galonsQuantityOfSubstitution.push(galonsArray[z].quantityOfSubstitution);\n                    galonsType.push(galonsArray[z].typeOrder)\n                }\n                objectToCreated.galons = galons;\n                objectToCreated.galonsQuantityOfBuying = galonsQuantityOfBuying;\n                objectToCreated.galonsQuantityOfSubstitution = galonsQuantityOfSubstitution;\n            }\n            //prepare location \n            let lang = req.body.lang;\n            let lat = req.body.lat;\n            let orderLocation = [lang, lat];\n            objectToCreated.location = orderLocation\n            objectToCreated.provider = req.body.provider;\n            objectToCreated.customer = req.user.id;\n            objectToCreated.price = req.body.price;\n            let newOrder = await Order.create(objectToCreated);\n\n            //in app notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.provider,\n                order: newOrder,\n                text: 'لديك طلب جديد',\n            });\n\n            //send notifications\n            let title = \"لديك طلب جديد\";\n            let body = \"new Order\"\n            send(newOrder.provider, title, body)\n\n\n            //prepare response    \n            let retriveOrder = await Order.findById(newOrder.id)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            let lenOfCartons = await retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = await retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    item: item,\n                    quantityOfBuying: quantityOfBuying,\n                    typeOrderOfSubstitution: quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id\n\n\n            return res.status(201).json(result)\n        } catch (err) {\n            next(err)\n        }\n\n    },\n    //retrive all orders under specific provider \n    async allOrdersOfProvider(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status;\n            query.provider = req.params.providerId;\n            let allOrders = await Order.find(query)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //validation input of calulate price \n    validateBodyOfCalulatePrice() {\n        return [\n            body(\"from\").exists().withMessage(\"from location is required\"),\n            body(\"to\").exists().withMessage(\"to location is required\")\n        ]\n    },\n    //calulate price of distance between provider and dilver location of order\n    async calculatePriceOfDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.from.lang);\n            let lat1 = parseFloat(req.body.from.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.to.lang);\n            let lat2 = parseFloat(req.body.to.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            //fetch price for each km\n            let price = await Price.findOne();\n            let cost = d * price.price;\n            return res.status(200).json({\n                \"cost\": cost,\n                \"distance\": d,\n                \"priceOfEachKm\": price.price\n            });\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one order details\n    async orderDetails(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            //prepare response    \n            let retriveOrder = await Order.findById(orderId)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            if (!retriveOrder)\n                return res.status(404).end()\n            let lenOfCartons = retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    \"item\": item,\n                    \"quantityOfBuying\": quantityOfBuying,\n                    \"typeOrderOfSubstitution\": quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id\n            return res.status(200).json(result)\n        } catch (err) {\n            next(err)\n        }\n    },\n    //accept order\n    async acceptOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"accepted\" }, { new: true });\n\n            //inApp notificattion \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder,\n                text: 'your Order is accepted'\n            })\n            //send notification to client\n            let title = \"your Order is accepted\";\n            let body = 'Accepted'\n            send(newOrder.customer, title, body)\n\n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    //refuse order by provider\n    async refuseOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"rejected\" }, { new: true });\n            console.log(newOrder.status)\n\n            //send notification to client\n            let title = \"نعتذر لعدم قبول طلبك\";\n            let body = 'So Soory about That';\n            send(newOrder.customer, title, body)\n\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder,\n                text: 'نعتذر لعدم قبول طلبك'\n            })\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order ondiliver order \n    async makeOrderOnDiliver(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"onTheWay\" }, { new: true });\n            //send notification to provider by completed order \n            let title = \"Your Order On The Way\";\n            let body = \"wait it plz\"\n            send(newOrder.customer, title, body)\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder.id,\n                text: 'Your Order On The Way'\n            })\n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order done by user \n    async makeOrderDone(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let customer = orderDetails.customer\n            if (!(customer == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"delivered\" }, { new: true });\n\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.provider,\n                order: newOrder.id,\n                text: 'لقد تم اتمام الطلب بنجاح'\n            })\n\n            //send notification to provider by completed order \n            let body = 'congratulations';\n            let title = \"لقد تم اتمام الطلب بنجاح \"\n            send(orderDetails.provider, title, body)\n            \n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}