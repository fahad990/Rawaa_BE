{"version":3,"sources":["../../src/controllers/admin.controller.js"],"names":["allUsers","req","res","next","user","type","query","find","sort","creationDate","users","status","json","createPriceOfKilloMeter","body","price","prices","length","create","newDoc","updatePriceOfKilloMeter","findByIdAndUpdate","params","id","new","deactiveUser","userId","findById","userDetails","active","newUser","activeUser","adminStatisttics","count","numberOfOrder","penddingOrder","acceptedOrder","rejectedOrder","onTheWayOrder","deliveredOrder","numberOfClient","numberOfProvider","getRecentOrders","limit","populate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","customer","provider"],"mappings":"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","file":"admin.controller.js","sourcesContent":["import User from '../models/user.model'\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport ApiError from '../helpers/ApiError'\nimport ApiResponse from '../helpers/ApiResponse'\nimport PriceKm from '../models/price-of-km.model';\nimport Order from '../models/order.model'\n\n//KfQnPp9bNf2S2m6z\nexport default {\n    //create new order \n    async allUsers(req, res, next) {\n        try {\n            if (req.user.type != \"ADMIN\")\n                return next(new ApiError(403, \"not admin user\"));\n\n            let query = {}\n            if (req.query.type) {\n                query.type = req.query.type;\n            }\n            let users = await User.find(query).sort({ creationDate: -1 });\n            return res.status(200).json(users)\n        } catch (err) {\n            next(err)\n        }\n    },\n    //create price for km in diliver\n    async createPriceOfKilloMeter(req, res, next) {\n        try {\n            if (!(req.user.type == \"ADMIN\"))\n                return next(new ApiError(403, \"not admin user\"));\n            if (!req.body.price)\n                return next(new ApiError(422, \"price is required\"))\n            let prices = await PriceKm.find();\n            if (prices.length > 0)\n                return next(new ApiError(400, \"price already exist, update it plz\"))\n            let newDoc = await PriceKm.create(req.body);\n            return res.status(201).json(newDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //update price for km in diliver\n    async updatePriceOfKilloMeter(req, res, next) {\n        try {\n            if (!(req.user.type == \"ADMIN\"))\n                return next(new ApiError(403, \"not admin user\"));\n            if (!req.body.price)\n                return next(new ApiError(422, \"price is required\"))\n            let price = await PriceKm.findByIdAndUpdate(\n                req.params.id,\n                req.body,\n                { new: true }\n            )\n            return res.status(200).json(price)\n        } catch (err) {\n            next(err)\n        }\n    },\n    //deactive user account\n    async deactiveUser(req, res, next) {\n        try {\n            if (!(req.user.type == \"ADMIN\"))\n                return next(new ApiError(403, \"not admin user\"));\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return next(new ApiError(404));\n            let newUser = await User.findByIdAndUpdate(userId, { active: false }, { new: true });\n            return res.status(200).json(newUser);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //active user account \n    async activeUser(req, res, next) {\n        try {\n            if (!(req.user.type == \"ADMIN\"))\n                return next(new ApiError(403, \"not admin user\"));\n            let userId = req.params.userId;\n            let userDetails = await User.findById(userId);\n            if (!userDetails)\n                return next(new ApiError(404));\n            let newUser = await User.findByIdAndUpdate(userId, { active: true }, { new: true });\n            return res.status(200).json(newUser);\n        } catch (err) {\n            next(err)\n        }\n    },\n    async adminStatisttics(req, res, next) {\n        let numberOfOrder = await Order.count();\n        let penddingOrder = await Order.count({ status: \"pendding\" });\n        let acceptedOrder = await Order.count({ status: \"accepted\" });\n        let rejectedOrder = await Order.count({ status: \"rejected\" });\n        let onTheWayOrder = await Order.count({ status: \"onTheWay\" });\n        let deliveredOrder = await Order.count({ status: \"delivered\" });\n        let numberOfClient = await User.count({ type: \"NORMAL\" });\n        let numberOfProvider = await User.count({ type: \"PROVIDER\" });\n        return res.status(200).json({\n            numberOfOrder,\n            penddingOrder,\n            acceptedOrder,\n            rejectedOrder,\n            onTheWayOrder,\n            deliveredOrder,\n            numberOfClient,\n            numberOfProvider\n        })\n    },\n\n    async getRecentOrders(req, res, next) {\n        try {\n            let allOrders = await Order.find().sort({ creationDate: -1 }).limit(10)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                return OneOrderItem;\n            })\n            return res.status(200).json(result)\n\n        } catch (err) {\n            next(err)\n        }\n    },\n    \n\n}"]}