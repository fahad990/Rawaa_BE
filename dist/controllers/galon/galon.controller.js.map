{"version":3,"sources":["../../../src/controllers/galon/galon.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createGalon","req","res","next","validationErrors","array","length","user","type","file","body","img","_id","create","newDoc","status","json","allGalons","limit","parseInt","query","page","count","docsCount","find","populate","skip","sort","creationDate","allDocs","send","Math","ceil","galonDetails","galonId","params","findById","doc","updateGalon","galon","id","update","$set","size","priceOfBuying","priceOfSubstitution","minimumNumberOnOrder","newGalon","galonsOfOneProvider","userId","updateAvalaibiltyOfGalons","end","available","save"],"mappings":"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","file":"galon.controller.js","sourcesContent":["import Galon from '../../models/galon.model';\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport { toImgUrl } from '../../utils/index'\nimport ApiError from '../../helpers/ApiError'\nimport ApiResponse from '../../helpers/ApiResponse'\n\n\nexport default {\n\n    validateBody(isUpdate = false) {\n        return [\n            body(\"size\").exists().withMessage(\"numberOfBottles is required\"),\n            body(\"priceOfBuying\").exists().withMessage(\"priceOfBuying is required\")\n        ];\n    },\n    //create new galon\n    async createGalon(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (!(req.user.type == \"PROVIDER\")) {\n                next(new ApiError(403, 'not provider user'))\n            }\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            } else {\n                next(new ApiError(422, 'img is required'))\n            }\n            req.body.user = req.user._id\n            let newDoc = await Galon.create(req.body);\n            return res.status(201).json(newDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all galons \n    async allGalons(req, res, next) {\n        const limit = parseInt(req.query.limit) || 20;\n        const page = req.query.page || 1;\n        let query = {}\n        try {\n            let docsCount = await Galon.count(query)\n            let allDocs = await Galon.find(query).populate('user')\n                .skip((page * limit) - limit).limit(limit).sort({ creationDate: -1 });\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(docsCount / limit),\n                limit,\n                docsCount,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one galone details \n    async galonDetails(req, res, next) {\n        const galonId = req.params.galonId;\n        let doc = await Galon.findById(galonId);\n        if (!doc)\n            return next(new ApiError(404));\n        return res.status(200).json(doc);\n    },\n\n    //update one galon details \n    async updateGalon(req, res, next) {\n        const galonId = req.params.galonId;\n        try {\n            let galon = await Galon.findById(galonId)\n            if (!(req.user.id == galon.user)) {\n                return next(new ApiError(403, \"not have access to this resourse\"))\n            }\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            await Galon.update({ _id: galonId }, {\n                $set: {\n                    size: req.body.size || galon.size,\n                    img: req.body.img || galon.img,\n                    priceOfBuying: req.body.priceOfBuying || galon.priceOfBuying,\n                    priceOfSubstitution: req.body.priceOfSubstitution || galon.priceOfSubstitution,\n                    minimumNumberOnOrder: req.body.minimumNumberOnOrder || galon.minimumNumberOnOrder,\n                }\n            })\n            let newGalon = await Galon.findById(galonId)\n                .populate('user')\n            return res.status(200).json(newGalon)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive all galons under one provider \n    async galonsOfOneProvider(req, res, next) {\n        const limit = parseInt(req.query.limit) || 20;\n        const page = req.query.page || 1;\n        const userId = req.params.userId;\n        try {\n            let docsCount = await Galon.count({ user: userId })\n            let allDocs = await Galon.find({ user: userId })\n                .populate('user')\n                .skip((page - 1) * limit).limit(limit).sort({ creationDate: -1 })\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(docsCount / limit),\n                limit,\n                docsCount,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //make carttons available\n    async updateAvalaibiltyOfGalons(req, res, next) {\n        try {\n            let galonId = req.params.galonId;\n            let galonDetails = await Galon.findById(galonId);\n            if (!galonDetails)\n                return res.status(404).end();\n\n            if (galonDetails.available == true)\n                galonDetails.available = false\n            else\n                galonDetails.available = true\n\n            await galonDetails.save();\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n}"]}