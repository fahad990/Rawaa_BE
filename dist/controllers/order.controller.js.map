{"version":3,"sources":["../../src/controllers/order.controller.js"],"names":["deg2rad","deg","Math","PI","validateBody","isUpdate","exists","withMessage","createOrder","req","res","next","validationErrors","array","length","objectToCreated","body","cartons","cartonsArray","cartonsQuantity","x","push","id","quantity","galons","galonsArray","galonsQuantityOfBuying","galonsQuantityOfSubstitution","galonsType","z","quantityOfBuying","quantityOfSubstitution","typeOrder","lang","lat","orderLocation","location","provider","customer","user","price","deliveryPrice","create","newOrder","targetUser","order","text","newNoti","title","findById","populate","retriveOrder","lenOfCartons","result","resultcartons","resultcartonsQuantity","item","quantityItem","lenOfGalons","resultGalons","resultGalonsQuantityOfBuying","resultGalonsQuantityOfSubstitution","resultGalonsTypeOrder","galonsTypeOrder","typeOrderOfSubstitution","status","creationDate","json","allOrdersOfProvider","limit","parseInt","query","page","params","providerId","find","skip","sort","allOrders","map","OneOrderItem","cartonsResult","elme","oneCartonItem","galonsResult","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","send","ceil","validateBodyOfCalulatePrice","calculatePriceOfDistance","lang1","parseFloat","from","lat1","lang2","to","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","console","log","findOne","cost","orderDetails","orderId","end","acceptOrder","findByIdAndUpdate","new","refuseOrder","makeOrderOnDiliver","makeOrderDone","sendReasoneOfRefuseOrder","note","save","canceleOrder"],"mappings":"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","file":"order.controller.js","sourcesContent":["import Order from '../models/order.model'\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport ApiError from '../helpers/ApiError';\nimport ApiResponse from '../helpers/ApiResponse';\nimport Price from '../models/price-of-km.model';\nimport { send } from '../services/push-notifications';\nimport NotificationOrder from '../models/notification.model';\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\nexport default {\n\n    validateBody(isUpdate = false) {\n        return [\n            body(\"price\").exists().withMessage(\"price is required\"),\n            body(\"provider\").exists().withMessage(\"provider is required\"),\n        ];\n    },\n    //create new order \n    async createOrder(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let objectToCreated = {}\n            //prepare carton data [[{id : 5, quantity : 8}]]\n            if (req.body.cartons) {\n                let cartonsArray = req.body.cartons;\n                let cartons = [];\n                let cartonsQuantity = [];\n                for (let x = 0; x < cartonsArray.length; x++) {\n                    cartons.push(cartonsArray[x].id);\n                    cartonsQuantity.push(cartonsArray[x].quantity);\n                }\n                objectToCreated.cartons = cartons;\n                objectToCreated.cartonsQuantity = cartonsQuantity\n            }\n\n            //prepare galons data \n            if (req.body.galons) {\n                let galonsArray = req.body.galons;\n                let galons = [];\n                let galonsQuantityOfBuying = [];\n                let galonsQuantityOfSubstitution = [];\n                let galonsType = [];\n                for (let z = 0; z < galonsArray.length; z++) {\n                    galons.push(galonsArray[z].id);\n                    galonsQuantityOfBuying.push(galonsArray[z].quantityOfBuying);\n                    galonsQuantityOfSubstitution.push(galonsArray[z].quantityOfSubstitution);\n                    galonsType.push(galonsArray[z].typeOrder)\n                }\n                objectToCreated.galons = galons;\n                objectToCreated.galonsQuantityOfBuying = galonsQuantityOfBuying;\n                objectToCreated.galonsQuantityOfSubstitution = galonsQuantityOfSubstitution;\n            }\n            //prepare location \n            let lang = req.body.lang;\n            let lat = req.body.lat;\n            let orderLocation = [lang, lat];\n            objectToCreated.location = orderLocation\n            objectToCreated.provider = req.body.provider;\n            objectToCreated.customer = req.user.id;\n            objectToCreated.price = req.body.price;\n            objectToCreated.deliveryPrice = req.body.deliveryPrice;\n            let newOrder = await Order.create(objectToCreated);\n\n            //in app notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.provider,\n                order: newOrder,\n                text: 'لديك طلب جديد',\n            });\n\n            //send notifications\n            let title = \"لديك طلب جديد\";\n            let body = \"new Order\"\n            send(newOrder.provider, title, body)\n\n\n            //prepare response    \n            let retriveOrder = await Order.findById(newOrder.id)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            let lenOfCartons = await retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = await retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    item: item,\n                    quantityOfBuying: quantityOfBuying,\n                    typeOrderOfSubstitution: quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id;\n            result.deliveryPrice = retriveOrder.deliveryPrice;\n\n\n            return res.status(201).json(result)\n        } catch (err) {\n            next(err)\n        }\n\n    },\n    //retrive all orders under specific provider \n    async allOrdersOfProvider(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status;\n            query.provider = req.params.providerId;\n            let allOrders = await Order.find(query)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //validation input of calulate price \n    validateBodyOfCalulatePrice() {\n        return [\n            body(\"from\").exists().withMessage(\"from location is required\"),\n            body(\"to\").exists().withMessage(\"to location is required\")\n        ]\n    },\n    //calulate price of distance between provider and dilver location of order\n    async calculatePriceOfDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.from.lang);\n            let lat1 = parseFloat(req.body.from.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.to.lang);\n            let lat2 = parseFloat(req.body.to.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            //fetch price for each km\n            let price = await Price.findOne();\n            let cost = Math.ceil(d * price.price);\n\n            return res.status(200).json({\n                \"cost\": cost,\n                \"distance\": d,\n                \"priceOfEachKm\": price.price\n            });\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one order details\n    async orderDetails(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            //prepare response    \n            let retriveOrder = await Order.findById(orderId)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            if (!retriveOrder)\n                return res.status(404).end()\n            let lenOfCartons = retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    \"item\": item,\n                    \"quantityOfBuying\": quantityOfBuying,\n                    \"typeOrderOfSubstitution\": quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id\n            result.deliveryPrice = retriveOrder.deliveryPrice;\n            return res.status(200).json(result)\n        } catch (err) {\n            next(err)\n        }\n    },\n    //accept order\n    async acceptOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"accepted\" }, { new: true });\n\n            //inApp notificattion \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder,\n                text: 'تم قبول طلبك بنجاح يمكنك الآن الاتصال بموفر الخدمة'\n            })\n            //send notification to client\n            let title = \"إشعار بشأن طلبك \";\n            let body = ' تم قبول طلبك بنجاح يمكنك الآن الاتصال بموفر الخدمة'\n            send(newOrder.customer, title, body)\n\n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    //refuse order by provider\n    async refuseOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"rejected\" }, { new: true });\n            console.log(newOrder.status)\n\n            //send notification to client\n            let title = \"إشعار بشأن طلبك\";\n            let body = ' نعتذر لعدم قبول طلبك';\n            send(newOrder.customer, title, body)\n\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder,\n                text: 'نعتذر لعدم قبول طلبك'\n            })\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order ondiliver order \n    async makeOrderOnDiliver(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"onTheWay\" }, { new: true });\n            //send notification to provider by completed order \n            let title = \"إشعار بشأن طلبك\";\n            let body = \"طلبك في الطريق إليك  يرجى الانتظار\"\n            send(newOrder.customer, title, body)\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder.id,\n                text: 'طلبك في الطريق إليك  يرجى الانتظار'\n            })\n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order done by user \n    async makeOrderDone(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let customer = orderDetails.customer\n            if (!(customer == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"delivered\" }, { new: true });\n\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.provider,\n                order: newOrder.id,\n                text: 'لقد تم اتمام الطلب بنجاح'\n            })\n\n            //send notification to provider by completed order \n            let body = 'لقد تم اتمام الطلب بنجاح';\n            let title = \"إشعار بشأن طلبك\"\n            send(orderDetails.provider, title, body)\n\n            console.log(newOrder.status)\n\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //reasone of refuse order \n    async sendReasoneOfRefuseOrder(req, res, next) {\n        try {\n            let orderId = req.params.orderId;\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n\n            orderDetails.note = req.body.note;\n            await orderDetails.save();\n\n            let newOrder = await Order.findById(orderId);\n\n            //inApp notification \n            let newNoti = await NotificationOrder.create({\n                targetUser: newOrder.customer,\n                order: newOrder.id,\n                text: newOrder.note\n            })\n\n            //send notification to provider by completed order \n            let body = newOrder.note;\n            let title = \"اعتذار لرفض الطلب\"\n            send(orderDetails.customer, title, body)\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //canceled order by customer \n    async canceleOrder(req, res, next) {\n        try {\n            let orderId = req.params.orderId;\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            if (orderDetails.status == \"accepted\" || orderDetails.status == \"onTheWay\") {\n                return res.status(400).json({\n                    'message': \"can't cancel order now\"\n                })\n            }\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"canceled\" }, { new: true });\n            console.log(newOrder.status)\n            return res.status(204).end();\n\n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n}"]}