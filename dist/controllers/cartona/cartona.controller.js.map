{"version":3,"sources":["../../../src/controllers/cartona/cartona.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","createCartona","req","res","next","validationErrors","array","length","user","type","findById","id","userDetails","file","body","img","_id","create","newDoc","status","json","allCartones","limit","parseInt","query","page","typeOfSize","available","count","docsCount","find","populate","skip","sort","creationDate","allDocs","send","Math","ceil","updateCartona","cartonId","params","carton","update","$set","numberOfBottles","sizeOfBottles","price","minimumNumberOnOrder","newCartonw","cartonDetails","end","cartonsOfOneProvider","userId","updateAvalaibiltyOfCarton","save"],"mappings":"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","file":"cartona.controller.js","sourcesContent":["import Cartona from '../../models/cartona.model';\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport { toImgUrl } from '../../utils/index'\nimport ApiError from '../../helpers/ApiError'\nimport ApiResponse from '../../helpers/ApiResponse'\nimport User from '../../models/user.model'\n\nexport default {\n    validateBody(isUpdate = false) {\n        return [\n            body(\"numberOfBottles\").exists().withMessage(\"numberOfBottles is required\"),\n            body(\"sizeOfBottles\").exists().withMessage(\"sizeOfBottles is required\"),\n            // body(\"img\").exists().withMessage(\"img is required\"),\n            body(\"price\").exists().withMessage(\"price is required\"),\n        ];\n    },\n    //create new cartona product\n    async createCartona(req, res, next) {\n        const validationErrors = validationResult(req).array();\n        if (validationErrors.length > 0)\n            return next(new ApiError(422, validationErrors));\n        try {\n            if (!(req.user.type == \"PROVIDER\")) {\n                next(new ApiError(403, 'not provider user'))\n            }\n            let userDetails = await User.findById(req.user.id);\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            } else {\n                next(new ApiError(422, 'img is required'))\n            }\n            req.body.user = req.user._id\n            let newDoc = await Cartona.create(req.body);\n            return res.status(201).json(newDoc);\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive all cartona products \n    async allCartones(req, res, next) {\n        const limit = parseInt(req.query.limit) || 20;\n        const page = req.query.page || 1;\n        let query = {}\n        if (req.query.typeOfSize)\n            query.typeOfSize = req.query.typeOfSize\n\n        if (req.query.available)\n            query.available = req.query.available\n        try {\n            let docsCount = await Cartona.count(query)\n            let allDocs = await Cartona.find(query).populate('user')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 })\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(docsCount / limit),\n                limit,\n                docsCount,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //update cartone\n    async updateCartona(req, res, next) {\n        const cartonId = req.params.cartonId;\n        try {\n            let carton = await Cartona.findById(cartonId)\n            if (!(req.user.id == carton.user)) {\n                return next(new ApiError(403, \"not have access to this resourse\"))\n            }\n\n            if (req.file) {\n                req.body.img = await toImgUrl(req.file)\n            }\n            await Cartona.update({ _id: cartonId }, {\n                $set: {\n                    numberOfBottles: req.body.numberOfBottles || carton.numberOfBottles,\n                    sizeOfBottles: req.body.sizeOfBottles || carton.sizeOfBottles,\n                    typeOfSize: req.body.typeOfSize || carton.typeOfSize,\n                    price: req.body.price || carton.price,\n                    available: req.body.available || carton.available,\n                    img: req.body.img || carton.img,\n                    minimumNumberOnOrder: req.body.minimumNumberOnOrder || carton.minimumNumberOnOrder,\n                }\n            })\n            let newCartonw = await Cartona.findById(carton)\n                .populate('user')\n            return res.status(200).json(newCartonw)\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //retrive one cartone details \n    async cartonDetails(req, res, next) {\n        try {\n            if (!req.params.cartonId)\n                next(new ApiError(422, \"missed cartonId\"))\n            const cartonId = req.params.cartonId;\n            let carton = await Cartona.findById(cartonId).populate('user')\n            if (!carton) {\n                return res.status(404).end();\n            }\n            return res.status(200).json(carton)\n        } catch (err) {\n            next\n        }\n    },\n    //retrive all galons under one provider \n    async cartonsOfOneProvider(req, res, next) {\n        const limit = parseInt(req.query.limit) || 200;\n        const page = req.query.page || 1;\n        const userId = req.params.userId;\n        try {\n            let query = {}\n            if (req.query.available)\n                query.available = req.query.available\n            query.user = userId\n            let docsCount = await Cartona.count(query)\n            let allDocs = await Cartona.find(query)\n                .populate('user')\n                .skip((page - 1) * limit).limit(limit).sort({ creationDate: -1 })\n            return res.send(new ApiResponse(\n                allDocs,\n                page,\n                Math.ceil(docsCount / limit),\n                limit,\n                docsCount,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //make carttons available\n    async updateAvalaibiltyOfCarton(req, res, next) {\n        try {\n            let cartonId = req.params.cartonId;\n            let cartonDetails = await Cartona.findById(cartonId);\n            if (!cartonDetails)\n                return res.status(404).end();\n\n            if (cartonDetails.available == true)\n                cartonDetails.available = false\n            else\n                cartonDetails.available = true\n\n            await cartonDetails.save();\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}\n"]}