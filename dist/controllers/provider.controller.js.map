{"version":3,"sources":["../../src/controllers/provider.controller.js"],"names":["unCompletedOrderOfOneProvider","req","res","next","limit","parseInt","query","page","find","$and","provider","params","providerId","$or","status","populate","skip","sort","creationDate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","length","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","customer","id","price","deliveryPrice","send","Math","ceil","completedOrderOfOneProvider","countOrdersOfProvider","findById","providerDetails","count","countOfAllOrder","queryComplete","countOfCompleted","queryOfPending","countOfPendding","queryOfRefuse","countOfRefuse","json","retriveSomeOfReports","from","to","$gte","$lte","console","log","totalProductPrice","reduce","accumulator","currentValue","totalDeliveryPrice","totalPrice","numberOfOrders"],"mappings":"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","file":"provider.controller.js","sourcesContent":["import mongoose from 'mongoose';\nimport ApiResponse from '../helpers/ApiResponse';\nimport ApiError from '../helpers/ApiError';\nimport Order from '../models/order.model';\nimport User from '../models/user.model'\n\nexport default {\n    async unCompletedOrderOfOneProvider(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 1100;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { provider: req.params.providerId },\n                    { $or: [{ status: \"onTheWay\" }, { status: \"accepted\" }, { status: \"pendding\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice;\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    async completedOrderOfOneProvider(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 1100;\n            let page = req.query.page || 1;\n            let allOrders = await Order.find({\n                $and: [\n                    { provider: req.params.providerId },\n                    { $or: [{ status: \"delivered\" }, { status: \"rejected\" }] }\n                ]\n            })\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                OneOrderItem.deliveryPrice = elme.deliveryPrice\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n    //fetch some statistics about provider \n    async countOrdersOfProvider(req, res, next) {\n        try {\n            let providerId = req.params.providerId;\n            let providerDetails = await User.findById(providerId);\n            let countOfAllOrder = await Order.count({ provider: providerId });\n\n            let queryComplete = {};\n            queryComplete.status = \"delivered\";\n            queryComplete.provider = providerId;\n            let countOfCompleted = await Order.count(queryComplete);\n\n            let queryOfPending = {}\n            queryOfPending.status = \"pendding\";\n            queryOfPending.provider = providerId;\n            let countOfPendding = await Order.count(queryOfPending);\n\n            let queryOfRefuse = {}\n            queryOfRefuse.status = \"rejected\";\n            queryOfRefuse.provider = providerId;\n            let countOfRefuse = await Order.count(queryOfRefuse);\n\n            return res.status(200).json({\n                countOfAllOrder,\n                countOfCompleted,\n                countOfPendding,\n                countOfRefuse\n            })\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //fech some of reports about providers activities \n    async retriveSomeOfReports(req, res, next) {\n        try {\n            let providerId = req.params.providerId;\n            let query = {}\n            let { from, to } = req.query\n\n            if (from)\n                query.creationDate = { $gte: +from }\n            if (to)\n                query.creationDate = { ...query.creationDate, $lte: +to }\n            query.provider = providerId;\n            query.status = \"delivered\";\n            console.log(req.query)\n            let allOrders = await Order.find(query);\n            let totalProductPrice = allOrders.reduce((accumulator, currentValue) => accumulator + currentValue.price, 0);\n            console.log(totalProductPrice)\n            let totalDeliveryPrice = allOrders.reduce((accumulator, currentValue) => accumulator + currentValue.deliveryPrice, 0);\n            let totalPrice = totalDeliveryPrice + totalProductPrice;\n            let numberOfOrders = allOrders.length;\n            return res.status(200).json({\n                totalProductPrice,\n                totalDeliveryPrice,\n                totalPrice,\n                numberOfOrders\n            })\n        } catch (err) {\n            next(err)\n        }\n    },\n}"]}