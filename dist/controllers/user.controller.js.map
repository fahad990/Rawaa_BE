{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateBody","isUpdate","exists","withMessage","isEmail","custom","value","req","findOne","email","user","phone","userQuery","_id","$ne","userPhoneQuery","signUp","res","next","validationErrors","array","length","file","body","img","type","active","create","createdUser","status","send","token","signin","console","log","completedOrderOfOneUser","limit","parseInt","query","page","find","$and","customer","params","userId","$or","populate","skip","sort","creationDate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","provider","price","deliveryPrice","Math","ceil","unCompletedOrderOfOneUser","countOrdersOfCustomer","customerId","findById","customerDetails","count","countOfAllOrder","queryComplete","countOfCompleted","queryOfPending","countOfPendding","queryOfRefuse","countOfRefuse","json","updateProfile","userDetails","end","findByIdAndUpdate","new","newUser","reriveUserDetails"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport ApiError from '../helpers/ApiError'\r\nimport { multerSaveTo } from '../services/multer'\r\nimport { toImgUrl } from '../utils/index'\r\nimport Order from '../models/order.model'\r\nimport ApiResponse from '../helpers/ApiResponse'\r\n\r\n\r\nconst { jwtSecret } = config;\r\nconst generateToken = id => {\r\n\r\n    return jwt.sign({\r\n        sub: id,\r\n        iss: 'App',\r\n        iat: new Date().getTime(),\r\n    }, jwtSecret, { expiresIn: '10000s' })\r\n}\r\n\r\n\r\n//function check phone regular exression \r\n//this function support \r\n// +XX-XXXX-XXXX  \r\n// +XX.XXXX.XXXX  \r\n// +XX XXXX XXXX \r\nconst checkPhone = inputtxt => {\r\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\n    if (inputtxt.match(phoneno)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"invalid phone\")\r\n    }\r\n}\r\nexport default {\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\"),\r\n            body(\"email\").exists().withMessage(\"Email is required\")\r\n                .isEmail().withMessage(\"Email is invalid syntax\")\r\n                .custom(async (value, { req }) => {\r\n                    let user = await User.findOne({ email: value });\r\n                    if (!user)\r\n                        return true\r\n                }).withMessage('email exist before'),\r\n            body(\"password\").exists().withMessage(\"password is required\"),\r\n            body(\"phone\").exists().withMessage(\"phone is requires\")\r\n                //make custome validation to phone to check on phone[unique, isPhone]\r\n                .custom(async (value, { req }) => {\r\n                    //call phone checking pattren function \r\n                    checkPhone(value);\r\n                    if (isUpdate && req.user.phone == value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n                    let userPhoneQuery = { phone: value };\r\n                    let user = await User.findOne(userPhoneQuery);\r\n                    if (user)\r\n                        throw new Error('phone already exists');\r\n                    else\r\n                        return true\r\n                })\r\n        ];\r\n    },\r\n    //signup logic \r\n    async signUp(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (req.file) {\r\n                req.body.img = await toImgUrl(req.file)\r\n            }\r\n            \r\n            if (req.body.type == \"PROVIDER\"){\r\n                req.body.active = false\r\n                req.body.img = \"https://cdn1.iconfinder.com/data/icons/user-pictures/100/supportmale-512.png\"\r\n            }\r\n                \r\n\r\n            let createdUser = await User.create(req.body);\r\n            res.status(201).send({ user: createdUser, token: generateToken(createdUser.id) });\r\n        } catch (err) {\r\n            next(err);\r\n        }\r\n    },\r\n    //sign in logic \r\n    async signin(req, res, next) {\r\n        let user = req.user; // Passport\r\n        console.log(user.type)\r\n        res.send({ user, token: generateToken(user.id) });\r\n    },\r\n    async completedOrderOfOneUser(req, res, next) {\r\n        try {\r\n            const limit = parseInt(req.query.limit) || 20;\r\n            let page = req.query.page || 1;\r\n            let allOrders = await Order.find({\r\n                $and: [\r\n                    { customer: req.params.userId },\r\n                    { $or: [{ status: \"delivered\" }, { status: \"rejected\" }] }\r\n                ]\r\n            })\r\n                .populate('cartons')\r\n                .populate('galons')\r\n                .populate('customer')\r\n                .populate('provider')\r\n                .skip((page - 1) * limit).limit(limit)\r\n                .sort({ creationDate: -1 });\r\n            //prepare response \r\n            let result = allOrders.map(elme => {\r\n                //first prepare cartons\r\n                let OneOrderItem = {};\r\n                let cartonsResult = [];\r\n                let cartons = elme.cartons;\r\n                let cartonsQuantity = elme.cartonsQuantity;\r\n                for (let x = 0; x < cartons.length; x++) {\r\n                    let oneCartonItem = {};\r\n                    let item = cartons[x];\r\n                    let quantity = cartonsQuantity[x]\r\n                    oneCartonItem.item = item;\r\n                    oneCartonItem.quantity = quantity;\r\n                    cartonsResult.push(oneCartonItem);\r\n                }\r\n                //assign cartons result to order item \r\n                OneOrderItem.cartons = cartonsResult;\r\n                //prepare galons    \r\n                let galonsResult = [];\r\n                let galons = elme.galons;\r\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\r\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\r\n                for (let x = 0; x < galons.length; x++) {\r\n                    let oneGalonsItem = {};\r\n                    let item = galons[x];\r\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\r\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\r\n                    oneGalonsItem.item = item;\r\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\r\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\r\n                    galonsResult.push(oneGalonsItem);\r\n                }\r\n                //assign galons result to order item \r\n                OneOrderItem.galons = galonsResult;\r\n                OneOrderItem.location = elme.location;\r\n                OneOrderItem.customer = elme.customer;\r\n                OneOrderItem.provider = elme.provider;\r\n                OneOrderItem.status = elme.status;\r\n                OneOrderItem.creationDate = elme.creationDate;\r\n                OneOrderItem.id = elme.id;\r\n                OneOrderItem.price = elme.price;\r\n                OneOrderItem.deliveryPrice = elme.deliveryPrice\r\n                return OneOrderItem;\r\n            })\r\n            res.send(new ApiResponse(\r\n                result,\r\n                page,\r\n                Math.ceil((result.length) / limit),\r\n                limit,\r\n                result.length,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    async unCompletedOrderOfOneUser(req, res, next) {\r\n        try {\r\n            const limit = parseInt(req.query.limit) || 20;\r\n            let page = req.query.page || 1;\r\n            let allOrders = await Order.find({\r\n                $and: [\r\n                    { customer: req.params.userId },\r\n                    { $or: [{ status: \"onTheWay\" }, { status: \"accepted\" }, { status: \"pendding\" }] }\r\n                ]\r\n            })\r\n                .populate('cartons')\r\n                .populate('galons')\r\n                .populate('customer')\r\n                .populate('provider')\r\n                .skip((page - 1) * limit).limit(limit)\r\n                .sort({ creationDate: -1 });\r\n            //prepare response \r\n            let result = allOrders.map(elme => {\r\n                //first prepare cartons\r\n                let OneOrderItem = {};\r\n                let cartonsResult = [];\r\n                let cartons = elme.cartons;\r\n                let cartonsQuantity = elme.cartonsQuantity;\r\n                for (let x = 0; x < cartons.length; x++) {\r\n                    let oneCartonItem = {};\r\n                    let item = cartons[x];\r\n                    let quantity = cartonsQuantity[x]\r\n                    oneCartonItem.item = item;\r\n                    oneCartonItem.quantity = quantity;\r\n                    cartonsResult.push(oneCartonItem);\r\n                }\r\n                //assign cartons result to order item \r\n                OneOrderItem.cartons = cartonsResult;\r\n                //prepare galons    \r\n                let galonsResult = [];\r\n                let galons = elme.galons;\r\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\r\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\r\n                for (let x = 0; x < galons.length; x++) {\r\n                    let oneGalonsItem = {};\r\n                    let item = galons[x];\r\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\r\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\r\n                    oneGalonsItem.item = item;\r\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\r\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\r\n                    galonsResult.push(oneGalonsItem);\r\n                }\r\n                //assign galons result to order item \r\n                OneOrderItem.galons = galonsResult;\r\n                OneOrderItem.location = elme.location;\r\n                OneOrderItem.customer = elme.customer;\r\n                OneOrderItem.provider = elme.provider;\r\n                OneOrderItem.status = elme.status;\r\n                OneOrderItem.creationDate = elme.creationDate;\r\n                OneOrderItem.id = elme.id;\r\n                OneOrderItem.price = elme.price;\r\n                OneOrderItem.deliveryPrice = elme.deliveryPrice;\r\n                return OneOrderItem;\r\n            })\r\n            res.send(new ApiResponse(\r\n                result,\r\n                page,\r\n                Math.ceil((result.length) / limit),\r\n                limit,\r\n                result.length,\r\n                req\r\n            ))\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //fetch some statistics about order \r\n    async countOrdersOfCustomer(req, res, next) {\r\n        try {\r\n            let customerId = req.params.customerId;\r\n            let customerDetails = await User.findById(customerId);\r\n            let countOfAllOrder = await Order.count({ customer: customerId });\r\n\r\n            let queryComplete = {};\r\n            queryComplete.status = \"delivered\";\r\n            queryComplete.customer = customerId;\r\n            let countOfCompleted = await Order.count(queryComplete);\r\n\r\n            let queryOfPending = {}\r\n            queryOfPending.status = \"pendding\";\r\n            queryOfPending.customer = customerId;\r\n            let countOfPendding = await Order.count(queryOfPending);\r\n\r\n            let queryOfRefuse = {}\r\n            queryOfRefuse.status = \"rejected\";\r\n            queryOfRefuse.customer = customerId;\r\n            let countOfRefuse = await Order.count(queryOfRefuse);\r\n\r\n            return res.status(200).json({\r\n                countOfAllOrder,\r\n                countOfCompleted,\r\n                countOfPendding,\r\n                countOfRefuse\r\n            })\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //update profile\r\n    async updateProfile(req, res, next) {\r\n        try {\r\n            let userId = req.params.userId;\r\n            let userDetails = await User.findById(userId);\r\n            if (!userDetails)\r\n                return res.status(404).end();\r\n            if (req.file)\r\n                req.body.img = await toImgUrl(req.file)\r\n            let newUser = await User.findByIdAndUpdate(userId, req.body, { new: true });\r\n            return res.status(200).json(newUser);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //fetch user details \r\n    async reriveUserDetails(req, res, next) {\r\n        try {\r\n            let userId = req.params.userId;\r\n            let userDetails = await User.findById(userId);\r\n            if (!userDetails)\r\n                return res.status(404).end();\r\n            return res.status(200).json(userDetails);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n}"]}