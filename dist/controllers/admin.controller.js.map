{"version":3,"sources":["../../src/controllers/admin.controller.js"],"names":["_firebaseAdmin","require","allUsers","req","res","next","user","type","query","find","sort","creationDate","users","status","json","createPriceOfKilloMeter","body","price","prices","length","create","newDoc","updatePriceOfKilloMeter","findByIdAndUpdate","params","id","new","retrivePriceOfOneKm","findOne","pric","deactiveUser","userId","findById","userDetails","active","newUser","console","log","db","database","ref","remove","then","send","catch","error","activeUser","adminStatisttics","count","numberOfOrder","penddingOrder","acceptedOrder","rejectedOrder","onTheWayOrder","deliveredOrder","numberOfClient","numberOfProvider","getRecentOrders","limit","populate","allOrders","result","map","OneOrderItem","cartonsResult","cartons","elme","cartonsQuantity","x","oneCartonItem","item","quantity","push","galonsResult","galons","galonsQuantityOfBuying","galonsQuantityOfSubstitution","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","location","customer","provider"],"mappings":"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","file":"admin.controller.js","sourcesContent":["import User from '../models/user.model'\r\nimport mongoose from 'mongoose';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport ApiError from '../helpers/ApiError'\r\nimport ApiResponse from '../helpers/ApiResponse'\r\nimport PriceKm from '../models/price-of-km.model';\r\nimport Order from '../models/order.model'\r\n\r\nvar _firebaseAdmin = require(\"firebase-admin\");\r\n\r\n//KfQnPp9bNf2S2m6z\r\nexport default {\r\n    //create new order \r\n    async allUsers(req, res, next) {\r\n        try {\r\n            if (req.user.type != \"ADMIN\")\r\n                return next(new ApiError(403, \"not admin user\"));\r\n\r\n            let query = {}\r\n            if (req.query.type) {\r\n                query.type = req.query.type;\r\n            }\r\n            let users = await User.find(query).sort({ creationDate: -1 });\r\n            return res.status(200).json(users)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //create price for km in diliver\r\n    async createPriceOfKilloMeter(req, res, next) {\r\n        try {\r\n            if (!(req.user.type == \"ADMIN\"))\r\n                return next(new ApiError(403, \"not admin user\"));\r\n            if (!req.body.price)\r\n                return next(new ApiError(422, \"price is required\"))\r\n            let prices = await PriceKm.find();\r\n            if (prices.length > 0)\r\n                return next(new ApiError(400, \"price already exist, update it plz\"))\r\n            let newDoc = await PriceKm.create(req.body);\r\n            return res.status(201).json(newDoc);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //update price for km in diliver\r\n    async updatePriceOfKilloMeter(req, res, next) {\r\n        try {\r\n            if (!(req.user.type == \"ADMIN\"))\r\n                return next(new ApiError(403, \"not admin user\"));\r\n            if (!req.body.price)\r\n                return next(new ApiError(422, \"price is required\"))\r\n            let price = await PriceKm.findByIdAndUpdate(\r\n                req.params.id,\r\n                req.body,\r\n                { new: true }\r\n            )\r\n            return res.status(200).json(price)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //retrive price of KiloMeter \r\n    async retrivePriceOfOneKm(req, res, next) {\r\n        try {\r\n            let pric = await PriceKm.findOne();\r\n            return res.status(200).json(pric);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n    //deactive user account\r\n    async deactiveUser(req, res, next) {\r\n        try {\r\n            if (!(req.user.type == \"ADMIN\"))\r\n                return next(new ApiError(403, \"not admin user\"));\r\n            let userId = req.params.userId;\r\n            let userDetails = await User.findById(userId);\r\n            if (!userDetails)\r\n                return next(new ApiError(404));\r\n            let newUser = await User.findByIdAndUpdate(userId, { active: false }, { new: true });\r\n            console.log(' ASS')\r\n            var db = _firebaseAdmin.database();\r\n            var ref = db.ref(\"geofire/\" + userId);\r\n            ref.remove().then(function() {\r\n              res.send({ status: 'ok' });\r\n            }).catch(function(error) {\r\n              console.log('Error deleting data:', error);\r\n              res.send({ status: 'error', error: error });\r\n            });\r\n\r\n            return res.status(200).json(newUser);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //active user account \r\n    async activeUser(req, res, next) {\r\n        try {\r\n            if (!(req.user.type == \"ADMIN\"))\r\n                return next(new ApiError(403, \"not admin user\"));\r\n            let userId = req.params.userId;\r\n            let userDetails = await User.findById(userId);\r\n            if (!userDetails)\r\n                return next(new ApiError(404));\r\n            let newUser = await User.findByIdAndUpdate(userId, { active: true }, { new: true });\r\n            return res.status(200).json(newUser);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    async adminStatisttics(req, res, next) {\r\n        let numberOfOrder = await Order.count();\r\n        let penddingOrder = await Order.count({ status: \"pendding\" });\r\n        let acceptedOrder = await Order.count({ status: \"accepted\" });\r\n        let rejectedOrder = await Order.count({ status: \"rejected\" });\r\n        let onTheWayOrder = await Order.count({ status: \"onTheWay\" });\r\n        let deliveredOrder = await Order.count({ status: \"delivered\" });\r\n        let numberOfClient = await User.count({ type: \"NORMAL\" });\r\n        let numberOfProvider = await User.count({ type: \"PROVIDER\" });\r\n        return res.status(200).json({\r\n            numberOfOrder,\r\n            penddingOrder,\r\n            acceptedOrder,\r\n            rejectedOrder,\r\n            onTheWayOrder,\r\n            deliveredOrder,\r\n            numberOfClient,\r\n            numberOfProvider\r\n        })\r\n    },\r\n\r\n    async getRecentOrders(req, res, next) {\r\n        try {\r\n            let allOrders = await Order.find().sort({ creationDate: -1 }).limit(10)\r\n                .populate('cartons')\r\n                .populate('galons')\r\n                .populate('customer')\r\n                .populate('provider')\r\n            //prepare response \r\n            let result = allOrders.map(elme => {\r\n                //first prepare cartons\r\n                let OneOrderItem = {};\r\n                let cartonsResult = [];\r\n                let cartons = elme.cartons;\r\n                let cartonsQuantity = elme.cartonsQuantity;\r\n                for (let x = 0; x < cartons.length; x++) {\r\n                    let oneCartonItem = {};\r\n                    let item = cartons[x];\r\n                    let quantity = cartonsQuantity[x]\r\n                    oneCartonItem.item = item;\r\n                    oneCartonItem.quantity = quantity;\r\n                    cartonsResult.push(oneCartonItem);\r\n                }\r\n                //assign cartons result to order item \r\n                OneOrderItem.cartons = cartonsResult;\r\n                //prepare galons    \r\n                let galonsResult = [];\r\n                let galons = elme.galons;\r\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\r\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\r\n                for (let x = 0; x < galons.length; x++) {\r\n                    let oneGalonsItem = {};\r\n                    let item = galons[x];\r\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\r\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\r\n                    oneGalonsItem.item = item;\r\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\r\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\r\n                    galonsResult.push(oneGalonsItem);\r\n                }\r\n                //assign galons result to order item \r\n                OneOrderItem.galons = galonsResult;\r\n                OneOrderItem.location = elme.location;\r\n                OneOrderItem.customer = elme.customer;\r\n                OneOrderItem.provider = elme.provider;\r\n                OneOrderItem.status = elme.status;\r\n                OneOrderItem.creationDate = elme.creationDate;\r\n                OneOrderItem.id = elme.id;\r\n                OneOrderItem.price = elme.price;\r\n                return OneOrderItem;\r\n            })\r\n            return res.status(200).json(result)\r\n\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n\r\n}"]}