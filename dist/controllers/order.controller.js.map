{"version":3,"sources":["../../src/controllers/order.controller.js"],"names":["deg2rad","deg","Math","PI","validateBody","isUpdate","exists","withMessage","createOrder","req","res","next","validationErrors","array","length","objectToCreated","body","cartons","cartonsArray","cartonsQuantity","x","push","id","quantity","galons","galonsArray","galonsQuantityOfBuying","galonsQuantityOfSubstitution","galonsType","z","quantityOfBuying","quantityOfSubstitution","typeOrder","lang","lat","orderLocation","location","provider","customer","user","price","create","newOrder","findById","populate","retriveOrder","lenOfCartons","result","resultcartons","resultcartonsQuantity","item","quantityItem","lenOfGalons","resultGalons","resultGalonsQuantityOfBuying","resultGalonsQuantityOfSubstitution","resultGalonsTypeOrder","galonsTypeOrder","status","creationDate","json","allOrdersOfProvider","limit","parseInt","query","page","params","providerId","find","skip","sort","allOrders","map","OneOrderItem","cartonsResult","elme","oneCartonItem","galonsResult","oneGalonsItem","QuantityOfBuying","QuantityOfSubstitution","send","ceil","validateBodyOfCalulatePrice","calculatePriceOfDistance","lang1","parseFloat","from","lat1","lang2","to","lat2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","d","console","log","findOne","cost","orderDetails","orderId","end","acceptOrder","findByIdAndUpdate","new","refuseOrder","makeOrderOnDiliver","makeOrderDone"],"mappings":"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","file":"order.controller.js","sourcesContent":["import Order from '../models/order.model'\nimport mongoose from 'mongoose';\nimport { body, validationResult } from 'express-validator/check';\nimport ApiError from '../helpers/ApiError'\nimport ApiResponse from '../helpers/ApiResponse'\nimport Price from '../models/price-of-km.model'\nimport { send } from '../services/push-notifications'\n\n\nlet deg2rad = (deg) => {\n    return deg * (Math.PI / 180)\n}\nexport default {\n\n    validateBody(isUpdate = false) {\n        return [\n            body(\"price\").exists().withMessage(\"price is required\"),\n            body(\"provider\").exists().withMessage(\"provider is required\"),\n        ];\n    },\n    //create new order \n    async createOrder(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            let objectToCreated = {}\n            //prepare carton data [[{id : 5, quantity : 8}]]\n            if (req.body.cartons) {\n                let cartonsArray = req.body.cartons;\n                let cartons = [];\n                let cartonsQuantity = [];\n                for (let x = 0; x < cartonsArray.length; x++) {\n                    cartons.push(cartonsArray[x].id);\n                    cartonsQuantity.push(cartonsArray[x].quantity);\n                }\n                objectToCreated.cartons = cartons;\n                objectToCreated.cartonsQuantity = cartonsQuantity\n            }\n\n            //prepare galons data \n            if (req.body.galons) {\n                let galonsArray = req.body.galons;\n                let galons = [];\n                let galonsQuantityOfBuying = [];\n                let galonsQuantityOfSubstitution = [];\n                let galonsType = [];\n                for (let z = 0; z < galonsArray.length; z++) {\n                    galons.push(galonsArray[z].id);\n                    galonsQuantityOfBuying.push(galonsArray[z].quantityOfBuying);\n                    galonsQuantityOfSubstitution.push(galonsArray[z].quantityOfSubstitution);\n                    galonsType.push(galonsArray[z].typeOrder)\n                }\n                objectToCreated.galons = galons;\n                objectToCreated.galonsQuantityOfBuying = galonsQuantityOfBuying;\n                objectToCreated.galonsQuantityOfSubstitution = galonsQuantityOfSubstitution;\n            }\n            //prepare location \n            let lang = req.body.lang;\n            let lat = req.body.lat;\n            let orderLocation = [lang, lat];\n            objectToCreated.location = orderLocation\n            objectToCreated.provider = req.body.provider;\n            objectToCreated.customer = req.user.id;\n            objectToCreated.price = req.body.price;\n            let newOrder = await Order.create(objectToCreated);\n            //prepare response    \n            let retriveOrder = await Order.findById(newOrder.id)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            let lenOfCartons = await retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = await retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    \"item\": item,\n                    \"quantityOfBuying\": quantityOfBuying,\n                    \"typeOrderOfSubstitution\": quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id\n            //send notifications \n            send(newOrder.provider, \"لديك طلب جديد \", result)\n            return res.status(201).json(result)\n        } catch (err) {\n            next(err)\n        }\n\n    },\n    //retrive all orders under specific provider \n    async allOrdersOfProvider(req, res, next) {\n        try {\n            const limit = parseInt(req.query.limit) || 20;\n            let page = req.query.page || 1;\n            let query = {}\n            if (req.query.status)\n                query.status = req.query.status;\n            query.provider = req.params.providerId;\n            let allOrders = await Order.find(query)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n                .skip((page - 1) * limit).limit(limit)\n                .sort({ creationDate: -1 });\n            //prepare response \n            let result = allOrders.map(elme => {\n                //first prepare cartons\n                let OneOrderItem = {};\n                let cartonsResult = [];\n                let cartons = elme.cartons;\n                let cartonsQuantity = elme.cartonsQuantity;\n                for (let x = 0; x < cartons.length; x++) {\n                    let oneCartonItem = {};\n                    let item = cartons[x];\n                    let quantity = cartonsQuantity[x]\n                    oneCartonItem.item = item;\n                    oneCartonItem.quantity = quantity;\n                    cartonsResult.push(oneCartonItem);\n                }\n                //assign cartons result to order item \n                OneOrderItem.cartons = cartonsResult;\n                //prepare galons    \n                let galonsResult = [];\n                let galons = elme.galons;\n                let galonsQuantityOfBuying = elme.galonsQuantityOfBuying;\n                let galonsQuantityOfSubstitution = elme.galonsQuantityOfSubstitution;\n                for (let x = 0; x < galons.length; x++) {\n                    let oneGalonsItem = {};\n                    let item = galons[x];\n                    let QuantityOfBuying = galonsQuantityOfBuying[x]\n                    let QuantityOfSubstitution = galonsQuantityOfSubstitution[x]\n                    oneGalonsItem.item = item;\n                    oneGalonsItem.galonsQuantityOfBuying = QuantityOfBuying;\n                    oneGalonsItem.galonsQuantityOfSubstitution = QuantityOfSubstitution;\n                    galonsResult.push(oneGalonsItem);\n                }\n                //assign galons result to order item \n                OneOrderItem.galons = galonsResult;\n                OneOrderItem.location = elme.location;\n                OneOrderItem.customer = elme.customer;\n                OneOrderItem.provider = elme.provider;\n                OneOrderItem.status = elme.status;\n                OneOrderItem.creationDate = elme.creationDate;\n                OneOrderItem.id = elme.id;\n                OneOrderItem.price = elme.price;\n                return OneOrderItem;\n            })\n            res.send(new ApiResponse(\n                result,\n                page,\n                Math.ceil((result.length) / limit),\n                limit,\n                result.length,\n                req\n            ))\n        } catch (err) {\n            next(err)\n        }\n    },\n\n    //validation input of calulate price \n    validateBodyOfCalulatePrice() {\n        return [\n            body(\"from\").exists().withMessage(\"from location is required\"),\n            body(\"to\").exists().withMessage(\"to location is required\")\n        ]\n    },\n    //calulate price of distance between provider and dilver location of order\n    async calculatePriceOfDistance(req, res, next) {\n        try {\n            const validationErrors = validationResult(req).array();\n            if (validationErrors.length > 0)\n                return next(new ApiError(422, validationErrors));\n            //first locattion point\n            let lang1 = parseFloat(req.body.from.lang);\n            let lat1 = parseFloat(req.body.from.lat);\n            //scound location point\n            let lang2 = parseFloat(req.body.to.lang);\n            let lat2 = parseFloat(req.body.to.lat);\n\n            let R = 6371; // Radius of the earth in km\n            let dLat = deg2rad(lat2 - lat1);  // deg2rad above\n            let dLon = deg2rad(lang2 - lang1);\n            let a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n                Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            let d = R * c; // Distance in km\n            console.log(d);\n            //fetch price for each km\n            let price = await Price.findOne();\n            let cost = d * price.price;\n            return res.status(200).json({\n                \"cost\": cost,\n                \"distance\": d,\n                \"priceOfEachKm\": price.price\n            });\n        } catch (err) {\n            next(err)\n        }\n    },\n    //retrive one order details\n    async orderDetails(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            //prepare response    \n            let retriveOrder = await Order.findById(orderId)\n                .populate('cartons')\n                .populate('galons')\n                .populate('customer')\n                .populate('provider')\n            if (!retriveOrder)\n                return res.status(404).end()\n            let lenOfCartons = await retriveOrder.cartons.length;\n            let result = {};\n            result.cartons = []\n            //prepare cartons \n            let resultcartons = retriveOrder.cartons;\n            let resultcartonsQuantity = retriveOrder.cartonsQuantity;\n            for (let x = 0; x < lenOfCartons; x++) {\n                let item = resultcartons[x];\n                let quantityItem = resultcartonsQuantity[x];\n                result.cartons.push({ \"item\": item, \"quantity\": quantityItem })\n            }\n            //prepare galons \n            let lenOfGalons = await retriveOrder.galons.length;\n            result.galons = [];\n            let resultGalons = retriveOrder.galons;\n            let resultGalonsQuantityOfBuying = retriveOrder.galonsQuantityOfBuying;\n            let resultGalonsQuantityOfSubstitution = retriveOrder.galonsQuantityOfSubstitution;\n            let resultGalonsTypeOrder = retriveOrder.galonsTypeOrder;\n            for (let x = 0; x < lenOfGalons; x++) {\n                let item = resultGalons[x];\n                let quantityOfBuying = resultGalonsQuantityOfBuying[x];\n                let quantityOfSubstitution = resultGalonsQuantityOfSubstitution[x];\n                result.galons.push({\n                    \"item\": item,\n                    \"quantityOfBuying\": quantityOfBuying,\n                    \"typeOrderOfSubstitution\": quantityOfSubstitution\n                })\n            }\n            result.price = retriveOrder.price;\n            result.location = retriveOrder.location;\n            result.customer = retriveOrder.customer;\n            result.provider = retriveOrder.provider;\n            result.status = retriveOrder.status;\n            result.creationDate = retriveOrder.creationDate;\n            result.id = retriveOrder.id\n            return res.status(200).json(result)\n        } catch (err) {\n            next(err)\n        }\n    },\n    //accept order\n    async acceptOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"accepted\" }, { new: true });\n            console.log(newOrder.status)\n            //send notification to client\n            send(newOrder.customer, \"your Order is accepted\", newOrder)\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    //refuse order by provider\n    async refuseOrder(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"rejected\" }, { new: true });\n            console.log(newOrder.status)\n            //send notification to client\n            send(newOrder.customer, \"نعتذر لعدم قبول طلبك\", newOrder)\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order ondiliver order \n    async makeOrderOnDiliver(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let provider = orderDetails.provider;\n            if (!(provider == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"onTheWay\" }, { new: true });\n            console.log(newOrder.status)\n            //send notification to provider by completed order \n            send(newOrder.customer, \"Your Order On The Way \", newOrder)\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n    // make order done by user \n    async makeOrderDone(req, res, next) {\n        let orderId = req.params.orderId;\n        try {\n            let orderDetails = await Order.findById(orderId);\n            if (!orderDetails)\n                return res.status(404).end();\n            let customer = orderDetails.customer\n            if (!(customer == req.user.id))\n                return next(new ApiError(403, \"not access to this operation\"))\n            let newOrder = await Order.findByIdAndUpdate(orderId, { status: \"delivered\" }, { new: true });\n            console.log(newOrder.status)\n            //send notification to provider by completed order \n            send(newOrder.provider, \"لقد تم اتمام الطلب بنجاح \", newOrder)\n            return res.status(204).end();\n        } catch (err) {\n            next(err)\n        }\n    },\n\n}"]}