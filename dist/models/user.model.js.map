{"version":3,"sources":["../../src/models/user.model.js"],"names":["UserSchema","name","type","String","trim","required","enum","default","password","phone","unique","img","creationDate","Date","company","active","Boolean","email","pushTokens","code","pre","next","account","isModified","salt","genSaltSync","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","_id","__v","initialize","connection","plugin","model","startAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,qBAAW;AAC1BC,UAAM;AACFC,cAAMC,MADJ;AAEFC,cAAM,IAFJ;AAGFC,kBAAU;AAHR,KADoB;AAM1BH,UAAM;AACFA,cAAMC,MADJ;AAEFG,cAAM,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAFJ;AAGFC,iBAAS;AAHP,KANoB;AAW1BC,cAAU;AACNN,cAAMC,MADA;AAENE,kBAAU;AAFJ,KAXgB;AAe1BI,WAAO;AACHP,cAAMC,MADH;AAEHE,kBAAU,IAFP;AAGHK,gBAAQ,CAAC,IAAD,EAAO,kBAAP;AAHL,KAfmB;AAoB1BC,SAAK,EAAE;AACHT,cAAMC,MADL;AAEDI,iBAAS;AAFR,KApBqB;AAwB1BK,kBAAc;AACVV,cAAMW,IADI;AAEVN,iBAAS,IAAIM,IAAJ;AAFC,KAxBY;AA4B1BC,aAAS;AACLZ,cAAMC;AADD,KA5BiB;AA+B1BY,YAAQ;AACJb,cAAMc,OADF;AAEJT,iBAAS;AAFL,KA/BkB;AAmC1BU,WAAO;AACHf,cAAMC;;AADH,KAnCmB;AAuC1Be,gBAAY,CAAC;AACThB,cAAMC;AADG,KAAD,CAvCc;AA0C1BgB,UAAM;AACFjB,cAAMC;AADJ;;AA1CoB,CAAX,CAAnB;;AAkDAH,WAAWoB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,UAAU,IAAhB;AACA,QAAI,CAACA,QAAQC,UAAR,CAAmB,UAAnB,CAAL,EAAqC,OAAOF,MAAP;;AAErC,QAAMG,OAAO,mBAAOC,WAAP,EAAb;AACA,uBAAOC,IAAP,CAAYJ,QAAQd,QAApB,EAA8BgB,IAA9B,EAAoCG,IAApC,CAAyC,gBAAQ;AAC7CL,gBAAQd,QAAR,GAAmBkB,IAAnB;AACAL;AACH,KAHD,EAGGO,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KAHT;AAIH,CATD;;AAcA/B,WAAWgC,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAClE,QAAIC,OAAO,IAAX;AACA,uBAAOC,OAAP,CAAeH,WAAf,EAA4BE,KAAK5B,QAAjC,EAA2C,UAAUuB,GAAV,EAAeO,OAAf,EAAwB;AAC/D,YAAIP,GAAJ,EACI,OAAOI,SAASJ,GAAT,CAAP;AACJI,iBAAS,IAAT,EAAeG,OAAf;AACH,KAJD;AAKH,CAPD;;AAUAtC,WAAWuC,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIG,GAAb;;AAEA,eAAOH,IAAIlC,QAAX;AACA,eAAOkC,IAAIxB,UAAX;AACA,eAAOwB,IAAIG,GAAX;AACA,eAAOH,IAAII,GAAX;AACH;AARoB,CAAzB;;AAWA,gCAAcC,UAAd,CAAyB,mBAASC,UAAlC;AACAhD,WAAWiD,MAAX,CAAkB,gCAAcA,MAAhC,EAAwC;AACpCC,WAAO,MAD6B;AAEpCC,aAAS;AAF2B,CAAxC;;kBAKe,mBAASD,KAAT,CAAe,MAAf,EAAuBlD,UAAvB,C","file":"user.model.js","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nconst UserSchema = new Schema({\r\n    name: {\r\n        type: String,\r\n        trim: true,\r\n        required: true\r\n    },\r\n    type: {\r\n        type: String,\r\n        enum: [\"ADMIN\", \"NORMAL\", \"PROVIDER\"],\r\n        default: \"NORMAL\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: true,\r\n        unique: [true, \"Duplicated Phone\"]\r\n    },\r\n    img: { // url \r\n        type: String,\r\n        default: \"https://cdn1.iconfinder.com/data/icons/people-cultures/512/_saudi_arabian_man-512.png\"\r\n    },\r\n    creationDate: {\r\n        type: Date,\r\n        default: new Date\r\n    },\r\n    company: {\r\n        type: String,\r\n    },\r\n    active: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    email: {\r\n        type: String,\r\n\r\n    },\r\n    pushTokens: [{\r\n        type: String\r\n    }],\r\n    code: {\r\n        type: String\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\nUserSchema.pre(\"save\", function (next) {\r\n    const account = this;\r\n    if (!account.isModified('password')) return next();\r\n\r\n    const salt = bcrypt.genSaltSync();\r\n    bcrypt.hash(account.password, salt).then(hash => {\r\n        account.password = hash;\r\n        next();\r\n    }).catch(err => console.log(err));\r\n});\r\n\r\n\r\n\r\n\r\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\r\n    let user = this;\r\n    bcrypt.compare(newPassword, user.password, function (err, isMatch) {\r\n        if (err)\r\n            return callback(err);\r\n        callback(null, isMatch);\r\n    })\r\n};\r\n\r\n\r\nUserSchema.set('toJSON', {\r\n    transform: function (doc, ret, options) {\r\n        ret.id = ret._id;\r\n\r\n        delete ret.password;\r\n        delete ret.pushTokens;\r\n        delete ret._id;\r\n        delete ret.__v;\r\n    }\r\n});\r\n\r\nautoIncrement.initialize(mongoose.connection);\r\nUserSchema.plugin(autoIncrement.plugin, {\r\n    model: 'user',\r\n    startAt: 1,\r\n});\r\n\r\nexport default mongoose.model(\"user\", UserSchema);"]}